<template>
		<view class="content">
			<image class="logo" src="/static/logo.png"></image>
			<view class="text-area">
				<text class="title">{{title}}</text>
			</view>
			
			<view class="status-container">
				<text class="status-title">支付状态</text>
				<view class="status-item">
					<text class="status-label">初始化状态:</text>
					<text class="status-value" :class="initStatus">{{initStatusText}}</text>
				</view>
				<view class="status-item">
					<text class="status-label">支付宝Client Secret:</text>
					<text class="status-value">{{alipayClientSecret || '未获取'}}</text>
				</view>
				<view class="status-item">
					<text class="status-label">银行卡Client Secret:</text>
					<text class="status-value">{{cardClientSecret || '未获取'}}</text>
				</view>

			</view>
			
			<bsf-strip-card-input-widget v-if="isInitialized" ref="bsf-card-input" style="z-index:9999;height: 200px; width: 350px;"  @onSuccess="handleCardSucess"  @onFailure="handleCardFailure" />
			
			<view class="button-container">
				<button class="btn btn-primary" @click="initStripe" :disabled="isInitialized">
					{{isInitialized ? '已初始化' : '初始化Stripe'}}
				</button>
				
				<button class="btn btn-secondary" @click="getAlipayClientSecret" :disabled="!isInitialized || isLoading">
					{{isLoading ? '获取中...' : '获取支付宝Client Secret'}}
				</button>
				
				<button class="btn btn-secondary" @click="getCardClientSecret" :disabled="!isInitialized || isLoading">
					{{isLoading ? '获取中...' : '获取银行卡Client Secret'}}
				</button>
				
				<button class="btn btn-success" @click="startAlipayPayment" :disabled="!alipayClientSecret || isPaying">
					{{isPaying ? '支付中...' : '开始支付宝支付'}}
				</button>
				
				<button class="btn btn-success" @click="startCardPayment" :disabled="!cardClientSecret || isPaying">
					{{isPaying ? '支付中...' : '开始银行卡支付'}}
				</button>
			</view>
			
			<!-- 日志显示 -->
			<!-- <view class="log-container">
				<text class="log-title">操作日志</text>
				<scroll-view class="log-content" scroll-y>
					<view v-for="(log, index) in logs" :key="index" class="log-item">
						<text class="log-time">{{log.time}}</text>
						<text class="log-message" :class="log.type">{{log.message}}</text>
					</view>
				</scroll-view>
			</view> -->
		</view>
	<!-- </> -->
</template>

<script>
	// 引入插件方法
import { initPaymentConfiguration, confirmAlipayPayment } from '@/uni_modules/bsf-stripe-alipay';
	
	export default {
		data() {
			return {
				title: 'Stripe Connect 支付 DEMO',
				// Stripe配置
				publicKey: 'pk_live_xxxx', // 写死的public key
				connectAccountId: 'acct_xxxx', // 写死的connect account id
				
				// 状态管理
				isInitialized: false,
				isLoading: false,
				isPaying: false,
				alipayClientSecret: '',
				cardClientSecret: '',
				
				// 状态显示
				initStatus: 'pending',
				initStatusText: '未初始化',
				
				// 日志
				logs: []
			}
		},
		onLoad() {
			this.addLog('info', '页面加载完成');
		},
		methods: {
			// 添加日志
			addLog(type, message) {
				const now = new Date();
				const time = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}:${now.getSeconds().toString().padStart(2, '0')}`;
				this.logs.unshift({
					time,
					type,
					message
				});
				
				// 限制日志数量
				if (this.logs.length > 20) {
					this.logs = this.logs.slice(0, 20);
				}
			},
			
			handleCardFailure() {
				
			},
			
			handleCardSucess() {
				
			},
			
			// 初始化Stripe
			initStripe() {
				try {
					this.addLog('info', '开始初始化Stripe...');
					
					// 初始化支付配置
					initPaymentConfiguration(this.publicKey, this.connectAccountId);
					
					this.isInitialized = true;
					this.initStatus = 'success';
					this.initStatusText = '初始化成功';
					
					this.addLog('success', 'Stripe初始化成功');
					uni.showToast({
						title: '初始化成功',
						icon: 'success'
					});
				} catch (error) {
					this.initStatus = 'error';
					this.initStatusText = '初始化失败';
					this.addLog('error', `初始化失败: ${error.message}`);
					uni.showToast({
						title: '初始化失败',
						icon: 'error'
					});
				}
			},
			
			// 获取支付宝Client Secret
			async getAlipayClientSecret() {
				if (!this.isInitialized) {
					uni.showToast({
						title: '请先初始化Stripe',
						icon: 'none'
					});
					return;
				}
				
				this.isLoading = true;
				this.addLog('info', '开始获取支付宝Client Secret...');
				
				try {
					const response = await uni.request({
						url: 'https://service.luckymeow.co.uk/api/order/orderptesde',
						method: 'GET',
						timeout: 10000
					});
					
					if (response.statusCode === 200 && response.data.status === 200) {
						console.log("response",response)
						this.alipayClientSecret = response.data.paymentIntent;
						this.addLog('success', `获取支付宝Client Secret成功: ${this.alipayClientSecret.substring(0, 20)}...`);
						uni.showToast({
							title: '获取成功',
							icon: 'success'
						});
					} else {
						throw new Error('接口返回错误');
					}
				} catch (error) {
					this.addLog('error', `获取支付宝Client Secret失败: ${error.message}`);
					uni.showToast({
						title: '获取失败',
						icon: 'error'
					});
				} finally {
					this.isLoading = false;
				}
			},	
			
			// 获取银行卡Client Secret
			async getCardClientSecret() {
				if (!this.isInitialized) {
					uni.showToast({
						title: '请先初始化Stripe',
						icon: 'none'
					});
					return;
				}
				
				this.isLoading = true;
				this.addLog('info', '开始获取银行卡Client Secret...');
				
				try {
					const response = await uni.request({
						url: 'https://service.luckymeow.co.uk/api/order/orderpatcard',
						method: 'GET',
						timeout: 10000
					});
					
					if (response.statusCode === 200 && response.data.status === 200) {
						console.log("card response", response)
						this.cardClientSecret = response.data.paymentIntent;
						this.addLog('success', `获取银行卡Client Secret成功: ${this.cardClientSecret.substring(0, 20)}...`);
						uni.showToast({
							title: '获取成功',
							icon: 'success'
						});
					} else {
						throw new Error('接口返回错误');
					}
				} catch (error) {
					this.addLog('error', `获取银行卡Client Secret失败: ${error.message}`);
					uni.showToast({
						title: '获取失败',
						icon: 'error'
					});
				} finally {
					this.isLoading = false;
				}
			},
			
			// 开始支付宝支付
			startAlipayPayment() {
				if (!this.alipayClientSecret) {
					uni.showToast({
						title: '请先获取支付宝Client Secret',
						icon: 'none'
					});
					return;
				}
				
				this.isPaying = true;
				this.addLog('info', '开始支付宝支付...');
				
				// 调用插件的支付方法
				confirmAlipayPayment({
					secretKey: this.alipayClientSecret,
					stripeAccountId: this.connectAccountId,
					returnUrl: "your-scheme://safepay/",
					onSuccess: () => {
						this.isPaying = false;
						this.addLog('success', '支付宝支付成功！');
						uni.showToast({
							title: '支付成功',
							icon: 'success'
						});
					},
					onFailure: (error) => {
						console.error(error);
						this.isPaying = false;
						this.addLog('error', `支付宝支付失败: ${error.errMsg} (错误码: ${error.errCode})`);
						uni.showToast({
							title: '支付失败',
							icon: 'error'
						});
					},
					onCancel: () => {
						this.isPaying = false;
						this.addLog('warning', '用户取消支付宝支付');
						uni.showToast({
							title: '支付已取消',
							icon: 'none'
						});
					}
				});
			},
			
			// 开始银行卡支付
			startCardPayment() {
				if (!this.cardClientSecret) {
					uni.showToast({
						title: '请先获取银行卡Client Secret',
						icon: 'none'
					});
					return;
				}
				
				this.isPaying = true;
				this.addLog('info', '开始银行卡支付...');
				
				const cardRef = this.$refs["bsf-card-input"];
				if (!cardRef) {
				  this.addLog('error', '未找到 cardInput 组件实例');
				  return;
				}
				
				console.log("card ref", cardRef);
				
				cardRef.doCardPay(this.publicKey, this.cardClientSecret, this.connectAccountId, "your-scheme://safepay/");
				
				// 调用插件的银行卡支付方法
				// confirmCardPayment({
				// 	secretKey: this.cardClientSecret,
				// 	stripeAccountId: this.connectAccountId,
				// 	cardInputWidget: cardRef,
				// 	onSuccess: () => {
				// 		this.isPaying = false;
				// 		this.addLog('success', '银行卡支付成功！');
				// 		uni.showToast({
				// 			title: '支付成功',
				// 			icon: 'success'
				// 		});
				// 	},
				// 	onFailure: (error) => {
				// 		this.isPaying = false;
				// 		this.addLog('error', `银行卡支付失败: ${error.errMsg} (错误码: ${error.errCode})`);
				// 		uni.showToast({
				// 			title: '支付失败',
				// 			icon: 'error'
				// 		});
				// 	},
				// 	onCancel: () => {
				// 		this.isPaying = false;
				// 		this.addLog('warning', '用户取消银行卡支付');
				// 		uni.showToast({
				// 			title: '支付已取消',
				// 			icon: 'none'
				// 		});
				// 	}
				// });
			}
		}
	}
</script>

<style>
	.scroll-container {
		flex: 1;
		background-color: #f5f5f5;
	}
	
	.content {
		/* padding: 20rpx; */
	}

	.logo {
		height: 200rpx;
		width: 200rpx;
		margin: 50rpx auto;
		align-self: center;
	}

	.text-area {
		align-items: center;
		justify-content: center;
		margin-bottom: 50rpx;
	}

	.title {
		font-size: 36rpx;
		color: #333;
		font-weight: bold;
	}
	
	/* 状态容器 */
	.status-container {
		background-color: white;
		border-radius: 20rpx;
		padding: 30rpx;
		margin-bottom: 30rpx;
	}
	
	.status-title {
		font-size: 32rpx;
		font-weight: bold;
		color: #333;
		margin-bottom: 20rpx;
	}
	
	.status-item {
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 15rpx;
	}
	
	.status-label {
		font-size: 28rpx;
		color: #666;
	}
	
	.status-value {
		font-size: 28rpx;
		color: #333;
		flex: 1;
		text-align: right;
		margin-left: 20rpx;
	}
	
	.status-value.success {
		color: #07c160;
	}
	
	.status-value.error {
		color: #ff4d4f;
	}
	
	.status-value.pending {
		color: #faad14;
	}
	
	/* 按钮容器 */
	.button-container {
		background-color: white;
		border-radius: 20rpx;
		padding: 30rpx;
		margin-bottom: 30rpx;
		flex-direction: column;
	}
	
	.btn {
		flex: 1;
		height: 88rpx;
		border-radius: 44rpx;
		font-size: 32rpx;
		font-weight: bold;
		margin-bottom: 24rpx;
		border-width: 0;
		align-items: center;
		justify-content: center;
	}
	
	.btn:last-child {
		margin-bottom: 0;
	}
	
	.btn-primary {
		background-color: #667eea;
		color: white;
	}
	
	.btn-primary:active {
		background-color: #5a6fd8;
	}
	
	.btn-secondary {
		background-color: #f093fb;
		color: white;
	}
	
	.btn-secondary:active {
		background-color: #e085e8;
	}
	
	.btn-success {
		background-color: #4facfe;
		color: white;
	}
	
	.btn-success:active {
		background-color: #3e9bed;
	}
	
	.btn[disabled] {
		background-color: #e0e0e0;
		color: #999;
	}
	
	/* 日志容器 */
	.log-container {
		background-color: white;
		border-radius: 20rpx;
		padding: 30rpx;
	}
	
	.log-title {
		font-size: 32rpx;
		font-weight: bold;
		color: #333;
		margin-bottom: 20rpx;
	}
	
	.log-content {
		height: 400rpx;
		border-width: 2rpx;
		border-color: #eee;
		border-radius: 10rpx;
		padding: 20rpx;
	}
	
	.log-item {
		flex-direction: row;
		margin-bottom: 10rpx;
		align-items: flex-start;
	}
	
	.log-time {
		font-size: 24rpx;
		color: #999;
		margin-right: 20rpx;
		width: 120rpx;
	}
	
	.log-message {
		font-size: 26rpx;
		color: #333;
		flex: 1;
	}
	
	.log-message.success {
		color: #07c160;
	}
	
	.log-message.error {
		color: #ff4d4f;
	}
	
	.log-message.warning {
		color: #faad14;
	}
	
	.log-message.info {
		color: #1890ff;
	}
</style>
